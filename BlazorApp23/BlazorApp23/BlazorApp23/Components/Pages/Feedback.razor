@page "/feedback"
@inject FeedbackService FeedbackService
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@rendermode InteractiveServer

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="container mx-auto max-w-4xl p-8 bg-gradient-to-br from-indigo-50 to-blue-100 rounded-3xl shadow-2xl mt-12">
    @if (!submitted)
    {
        <h2 class="text-4xl font-extrabold text-center text-gray-900 mb-8 animate-pulse">We'd Love Your Feedback!</h2>

        <EditForm Model="@feedbackModel" OnValidSubmit="HandleSubmit" FormName="feedbackForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 text-sm mb-6 font-medium animate-fade-in" />

            <div class="mb-6">
                <label class="block text-sm font-semibold text-gray-800 mb-2">Your Name</label>
                <InputText @bind-Value="feedbackModel.Name" class="w-full p-4 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:bg-gray-50 transition-all duration-300 shadow-sm" placeholder="Enter your name" />
                <ValidationMessage For="@(() => feedbackModel.Name)" class="text-red-600 text-sm mt-2" />
            </div>

            <div class="mb-6">
                <label class="block text-sm font-semibold text-gray-800 mb-2">Email Address</label>
                <InputText @bind-Value="feedbackModel.Email" class="w-full p-4 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:bg-gray-50 transition-all duration-300 shadow-sm" placeholder="Enter your email" />
                <ValidationMessage For="@(() => feedbackModel.Email)" class="text-red-600 text-sm mt-2" />
            </div>

            <div class="mb-8">
                <label class="block text-sm font-semibold text-gray-800 mb-3">Rating</label>
                <div class="flex justify-center gap-4">
                    @for (int i = 1; i <= 5; i++)
                    {
                        int starValue = i;
                        <span class="text-5xl cursor-pointer transition-all duration-300 @(starValue <= (hoverRating > 0 ? hoverRating : feedbackModel.Rating) ? "text-yellow-500 scale-110 drop-shadow-lg" : "text-gray-300")"
                              @onclick="() => SelectRating(starValue)"
                              @onmouseover="() => SetHoverRating(starValue)"
                              @onmouseout="ClearHoverRating">
                            ★
                        </span>
                    }
                </div>
                <ValidationMessage For="@(() => feedbackModel.Rating)" class="text-red-600 text-sm mt-3 text-center" />
            </div>

            <div class="mb-8">
                <label class="block text-sm font-semibold text-gray-800 mb-2">Your Feedback</label>
                <InputTextArea @bind-Value="feedbackModel.Message" class="w-full p-4 bg-white border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:bg-gray-50 transition-all duration-300 resize-none shadow-sm" rows="6" placeholder="Share your thoughts..." />
                <ValidationMessage For="@(() => feedbackModel.Message)" class="text-red-600 text-sm mt-2" />
            </div>

            <div class="text-center">
                <button type="submit" class="bg-indigo-600 text-white font-semibold py-3 px-10 rounded-xl hover:bg-indigo-700 hover:shadow-xl hover:-translate-y-1 transition-all duration-300 active:scale-95">
                    Submit Feedback
                </button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-center py-16 animate-fade-in">
            <h3 class="text-3xl font-bold text-gray-900 mb-4">Thank You for Your Feedback!</h3>
            <p class="text-gray-700 max-w-lg mx-auto mb-6">Your input means the world to us. We appreciate you taking the time to share your thoughts!</p>
            <button class="border-2 border-indigo-600 text-indigo-600 font-semibold py-2 px-8 rounded-xl hover:bg-indigo-600 hover:text-white hover:shadow-md transition-all duration-300" @onclick="ReturnToMenu">
                Return to Menu
            </button>
        </div>
    }

    @if (showRecentFeedback)
    {
        <div class="mt-12">
            <h4 class="text-2xl font-semibold text-gray-900 mb-6">Recent Feedback</h4>

            @if (recentFeedback == null || !recentFeedback.Any())
            {
                <p class="text-gray-600 text-center text-lg">No feedback yet. Be the first to share your thoughts!</p>
            }
            else
            {
                @foreach (var item in recentFeedback)
                {
                    <div class="p-6 bg-white rounded-xl shadow-md mb-6 transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
                        <div class="flex justify-between items-center mb-3">
                            <h5 class="text-lg font-semibold text-gray-800">@item.Name</h5>
                            <div class="text-yellow-500 text-xl">
                                @for (int i = 0; i < 5; i++)
                                {
                                    <span>@(i < item.Rating ? "★" : "☆")</span>
                                }
                            </div>
                        </div>
                        <p class="text-gray-700 leading-relaxed">@item.Message</p>
                        <div class="text-sm text-gray-500 mt-3">
                            Submitted on @item.SubmissionDate.ToString("MMMM dd, yyyy")
                        </div>
                    </div>
                }
            }
        </div>
    }
</div>

<style>
    .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    .animate-fade-in {
        animation: fadeIn 0.6s ease-in;
    }

    @@keyframes pulse {
        0%, 100%

    {
        opacity: 1;
    }

    50% {
        opacity: 0.8;
    }

    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(15px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }
</style>

@code {
    private FeedbackModel feedbackModel = new();
    private List<Feedback> recentFeedback = new();
    private bool submitted = false;
    private bool showRecentFeedback = true;
    private int hoverRating = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentFeedback();
    }

    private async Task LoadRecentFeedback()
    {
        try
        {
            recentFeedback = await FeedbackService.GetRecentFeedbackAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading feedback: {ex.Message}");
        }
    }

    private void SelectRating(int rating)
    {
        feedbackModel.Rating = rating;
        StateHasChanged(); 
    }

    private void SetHoverRating(int rating)
    {
        hoverRating = rating;
        StateHasChanged(); 
    }

    private void ClearHoverRating()
    {
        hoverRating = 0;
        StateHasChanged(); 
    }

    private async Task HandleSubmit()
    {
        try
        {
            await FeedbackService.SubmitFeedbackAsync(feedbackModel);
            submitted = true;
            feedbackModel = new(); 
            hoverRating = 0; 
            await LoadRecentFeedback();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting feedback: {ex.Message}");
        }
    }

    private void ReturnToMenu()
    {
        NavigationManager.NavigateTo("/menu");
    }
}