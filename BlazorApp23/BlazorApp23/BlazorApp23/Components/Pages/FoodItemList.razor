@page "/food-items"
@rendermode InteractiveServer
@using BlazorApp23.Components.Services
@inject FoodItemService FoodItemService
@inject NavigationManager NavigationManager
@using BlazorApp23.Components.Models

<div class="food-bg">
    <div class="food-bg-overlay"></div>
    <div class="container food-glass py-5">
        <h3 class="mb-4 food-title">MASALADAR BITES</h3>

        @if (error != null)
        {
            <div class="alert alert-danger mb-4">@error</div>
        }

        <div class="action-bar d-flex gap-2 mb-4">
            <button class="btn btn-primary action-btn" @onclick="ShowAddForm">
                <i class="bi bi-plus-circle me-2"></i> Add New Food Item
            </button>
            <button class="btn btn-secondary action-btn" @onclick="NavigateToWeeklyProfits">
                <i class="bi bi-graph-up me-2"></i> View Weekly Profits
            </button>
            <button class="btn btn-info action-btn" @onclick="NavigateToFeedback">
                <i class="bi bi-chat-square-text me-2"></i> User Suggestions
            </button>
            <button class="btn btn-warning action-btn" @onclick="NavigateToUserCount">
                <i class="bi bi-person-lines-fill me-2"></i> User History
            </button>
        </div>

        @if (showAddForm)
        {
            <div class="card mb-4 animated-fadein">
                <div class="card-header">
                    <h5 class="mb-0">@(currentFoodItem.Id == 0 ? "Add" : "Edit") Food Item</h5>
                </div>
                <div class="card-body">
                    <div class="form-group mb-3">
                        <label class="form-label fw-medium">Name</label>
                        <input class="form-control" @bind="currentFoodItem.Name" placeholder="Enter food item name" />
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label fw-medium">Category</label>
                        <select class="form-select" @bind="currentFoodItem.Category">
                            @foreach (var category in categories)
                            {
                                <option value="@category.Name">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-medium">Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">PKR</span>
                                    <input type="number" step="0.01" class="form-control" @bind="currentFoodItem.Price" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label class="form-label fw-medium">Discounted Price</label>
                                <div class="input-group">
                                    <span class="input-group-text">PKR</span>
                                    <input type="number" step="0.01" class="form-control" @bind="currentFoodItem.DiscountedPrice" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group mb-3">
                        <label class="form-label fw-medium">Image URL</label>
                        <input class="form-control mb-2" @bind="currentFoodItem.ImageUrl" placeholder="https://example.com/image.jpg" />
                        @if (!string.IsNullOrEmpty(currentFoodItem.ImageUrl))
                        {
                            <div class="image-container rounded">
                                <img src="@currentFoodItem.ImageUrl" class="img-fluid rounded" alt="Food item preview" style="max-height: 150px;" />
                            </div>
                        }
                    </div>

                    <div class="d-flex justify-content-end gap-2">
                        <button class="btn btn-secondary" @onclick="CancelEdit">
                            <i class="bi bi-x-circle me-2"></i> Cancel
                        </button>
                        <button class="btn btn-success" @onclick="SaveFoodItem">
                            <i class="bi bi-save me-2"></i> Save
                        </button>
                    </div>
                </div>
            </div>
        }

        <div class="row">
            @foreach (var category in foodItems.GroupBy(f => f.Category))
            {
                var categoryInfo = categories.FirstOrDefault(c => c.Name == category.Key);

                <div class="col-12 mb-5">
                    <div class="category-header">
                        <h4>@category.Key</h4>
                        @if (categoryInfo != null && !string.IsNullOrEmpty(categoryInfo.Description))
                        {
                            <p class="text-muted">@categoryInfo.Description</p>
                        }
                    </div>
                    <div class="row">
                        @foreach (var item in category)
                        {
                            <div class="col-md-4 mb-4">
                                <div class="card h-100 food-card animated-fadein">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <div class="image-container">
                                            <img src="@item.ImageUrl" class="card-img-top food-img-hover" alt="@item.Name" />
                                        </div>
                                    }
                                    <div class="card-body">
                                        <h5 class="card-title">@item.Name</h5>
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            @if (item.DiscountedPrice < item.Price)
                                            {
                                                <div>
                                                    <span class="text-muted text-decoration-line-through">@item.Price.ToString("C")</span>
                                                    <span class="fw-bold" style="color: #f5c542;">@item.DiscountedPrice.ToString("C")</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="fw-bold" style="color: #f5c542;">@item.Price.ToString("C")</span>
                                            }
                                            <span class="badge">
                                                @((DateTime.Now - item.DateAdded).TotalDays < 7 ? "New" : "")
                                            </span>
                                        </div>
                                        <div class="small text-muted">
                                            <i class="bi bi-calendar me-1"></i> Added: @item.DateAdded.ToString("MMMM dd, yyyy")
                                        </div>
                                    </div>
                                    <div class="card-footer bg-transparent d-flex justify-content-between">
                                        <button class="btn btn-sm btn-primary" @onclick="() => EditFoodItem(item)">
                                            <i class="bi bi-pencil me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteFoodItem(item.Id)">
                                            <i class="bi bi-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<FoodItem> foodItems = new();
    private List<Category> categories = new();
    private FoodItem currentFoodItem = new();
    private bool showAddForm = false;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            foodItems = await FoodItemService.GetAllFoodItemsAsync();
            categories = await FoodItemService.GetAllCategoriesAsync();

            if (categories.Count > 0 && currentFoodItem.Id == 0)
            {
                currentFoodItem.Category = categories[0].Name;
            }
        }
        catch (Exception ex)
        {
            error = $"Error loading data: {ex.Message}";
        }
    }

    private void ShowAddForm()
    {
        currentFoodItem = new FoodItem
        {
            Category = categories.Count > 0 ? categories[0].Name : string.Empty,
            Price = 0,
            DiscountedPrice = 0,
            DateAdded = DateTime.Now
        };
        showAddForm = true;
    }

    private async Task SaveFoodItem()
    {
        try
        {
            if (currentFoodItem.Id == 0)
            {
                await FoodItemService.AddFoodItemAsync(currentFoodItem);
            }
            else
            {
                await FoodItemService.UpdateFoodItemAsync(currentFoodItem);
            }

            foodItems = await FoodItemService.GetAllFoodItemsAsync();
            showAddForm = false;
        }
        catch (Exception ex)
        {
            error = $"Error saving food item: {ex.Message}";
        }
    }

    private void EditFoodItem(FoodItem item)
    {
        currentFoodItem = new FoodItem
        {
            Id = item.Id,
            Name = item.Name,
            Category = item.Category,
            Price = item.Price,
            DiscountedPrice = item.DiscountedPrice,
            ImageUrl = item.ImageUrl,
            DateAdded = item.DateAdded
        };
        showAddForm = true;
    }

    private async Task DeleteFoodItem(int id)
    {
        try
        {
            await FoodItemService.DeleteFoodItemAsync(id);
            foodItems = await FoodItemService.GetAllFoodItemsAsync();
        }
        catch (Exception ex)
        {
            error = $"Error deleting food item: {ex.Message}";
        }
    }

    private void CancelEdit()
    {
        showAddForm = false;
    }

    private void NavigateToWeeklyProfits()
    {
        NavigationManager.NavigateTo("/weekly-profits");
    }

    private void NavigateToFeedback()
    {
        NavigationManager.NavigateTo("/admin/feedback");
    }

    private void NavigateToUserCount()
    {
        NavigationManager.NavigateTo("/user-count");
    }
}

<style>
.food-bg {
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: url('https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=1500&q=80') center center/cover no-repeat;
    z-index: 0;
}
.food-bg-overlay {
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: rgba(26,42,68,0.7);
    z-index: 1;
}
.food-glass {
    position: relative;
    z-index: 2;
    background: rgba(255,255,255,0.92);
    border-radius: 24px;
    box-shadow: 0 8px 32px 0 rgba(30, 64, 175, 0.10), 0 1.5px 8px 0 rgba(56,189,248,0.10);
    backdrop-filter: blur(8px);
    margin-top: 40px;
    margin-bottom: 40px;
    max-width: 1200px;
    animation: fadeInUp 0.9s cubic-bezier(.4,0,.2,1);
    max-height: 90vh;           
    overflow-y: auto;           
    overscroll-behavior: contain; 
    padding-right: 1rem;        
}
@@keyframes fadeInUp {
    from { opacity: 0; transform: translateY(40px);}
    to { opacity: 1; transform: translateY(0);}
}
.food-title {
    font-family: 'Playfair Display', serif;
    color: #1a2a44;
    font-size: 2.5rem;
    font-weight: 900;
    letter-spacing: 1px;
    text-shadow: 0 2px 8px rgba(30, 64, 175, 0.10);
    text-align: center;
    margin-bottom: 2rem;
    animation: fadeIn 1.2s;
}
@@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}
.animated-fadein {
    animation: fadeInUp 0.7s cubic-bezier(.4,0,.2,1);
}
.food-card {
    transition: transform 0.25s cubic-bezier(.4,0,.2,1), box-shadow 0.25s cubic-bezier(.4,0,.2,1);
    background: rgba(255,255,255,0.98);
    border-radius: 16px;
    box-shadow: 0 2px 12px rgba(30, 64, 175, 0.08);
}
.food-card:hover {
    transform: translateY(-8px) scale(1.03);
    box-shadow: 0 8px 32px rgba(30, 64, 175, 0.18);
}
.food-img-hover {
    transition: transform 0.4s cubic-bezier(.4,0,.2,1), box-shadow 0.3s cubic-bezier(.4,0,.2,1);
    border-radius: 12px 12px 0 0;
}
.food-card:hover .food-img-hover {
    transform: scale(1.08) rotate(-2deg);
    box-shadow: 0 8px 32px rgba(245,197,66,0.18);
}
.action-bar {
    display: flex;
    gap: 1.2rem;
    margin-bottom: 2rem;
    justify-content: flex-start;
    flex-wrap: wrap;
    animation: fadeInUp 0.7s cubic-bezier(.4,0,.2,1);
}
.action-btn {
    position: relative;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.08rem;
    font-weight: 600;
    border-radius: 10px;
    box-shadow: 0 2px 12px rgba(30, 64, 175, 0.08);
    transition:
        background 0.2s,
        color 0.2s,
        box-shadow 0.3s cubic-bezier(.4,0,.2,1),
        transform 0.18s cubic-bezier(.4,0,.2,1);
    overflow: hidden;
    outline: none;
    border: none;
    min-width: 180px;
    padding: 12px 24px;
    cursor: pointer;
    background-clip: padding-box;
}
.action-btn:before {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    width: 0;
    height: 0;
    background: rgba(0,0,0,0.07);
    border-radius: 50%;
    transform: translate(-50%, -50%);
    transition: width 0.4s, height 0.4s, opacity 0.4s;
    opacity: 0;
    z-index: 0;
}
.action-btn:active:before {
    width: 180%;
    height: 180%;
    opacity: 1;
    transition: width 0.2s, height 0.2s, opacity 0.2s;
}
.action-btn:hover, .action-btn:focus {
    transform: translateY(-3px) scale(1.06);
    box-shadow: 0 8px 28px rgba(30, 64, 175, 0.16);
    filter: brightness(1.08);
    z-index: 1;
}
.action-btn i {
    font-size: 1.2em;
    transition: transform 0.3s cubic-bezier(.4,0,.2,1);
}
.action-btn:hover i {
    transform: scale(1.18) rotate(-8deg);
}
@@media (max-width: 900px) {
    .food-glass {
        padding: 1.2rem 0.5rem;
        margin-top: 15px;
        margin-bottom: 15px;
    }
    .food-title {
        font-size: 1.6rem;
    }
    .action-bar {
        flex-direction: column;
        gap: 0.7rem;
    }
    .action-btn {
        width: 100%;
        justify-content: center;
    }
}
.category-header {
    position: relative;
    padding-bottom: 12px;
    margin-bottom: 30px;
}
.category-header::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 80px;

    height: 3px;
    background: var(--primary);
    border-radius: 2px;
}
.category-header h4 {
    font-family: 'Playfair Display', serif;
    font-weight: 700;
    color: var(--secondary);
    font-size: 1.8rem;
}
.category-header p {
    font-size: 0.95rem;
    color: #6c757d;
}
.image-container {
    overflow: hidden;
    height: 220px;
    background: #f1f1f1;
    border-radius: 12px 12px 0 0;
}
.card-img-top {
    object-fit: cover;
    width: 100%;
    height: 100%;
}
.card-body {
    padding: 20px;
}
.card-body h5 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--secondary);
    font-family: 'Inter', sans-serif;
}
.card-footer {
    border-top: none;
    background: transparent;
    padding: 15px 20px;
}
.card-header {
    background: var(--primary);
    color: var(--secondary);
    font-weight: 600;
    border-radius: 12px 12px 0 0;
    padding: 15px 20px;
    font-family: 'Playfair Display', serif;
}
.form-control, .form-select {
    border-radius: 8px;
    border: 1px solid #ced4da;
}
.form-control:focus, .form-select:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 0.2rem rgba(245, 197, 66, 0.25);
}
.input-group-text {
    background: var(--primary);
    color: var(--secondary);
    border-radius: 8px 0 0 8px;
}


.btn-success {
    background: #2b8a3e;
    border: none;
    color: #ffffff;
    border-radius: 8px;
    padding: 10px 20px;
    font-family: 'Inter', sans-serif;
}
.btn-outline-danger {
    border-color: #c92a2a;
    color: #c92a2a;
    border-radius: 6px;
    font-family: 'Inter', sans-serif;
}

.alert-danger {
    border-radius: 8px;
    background: #ffd8d8;
    color: #c92a2a;
    padding: 15px;
    font-family: 'Inter', sans-serif;
}
.badge {
    border-radius: 12px;
    padding: 5px 10px;
    font-size: 0.85rem;
    background: var(--primary);
    color: var(--secondary);
}
.text-muted {
    font-size: 0.9rem;
}
</Style>
    