@page "/client/register"
@using System.ComponentModel.DataAnnotations
@using BlazorApp23.Components.Services

@inject ClientAuthService AuthService
@inject NavigationManager Navigation
@inject ILogger<ClientRegister> Logger
@rendermode InteractiveServer

<div class="auth-container">
    <div class="auth-card">
        <div class="header-section">
            <h2>Join Masaladar Bites</h2>
            <p>Islamabad's Premier Culinary Destination</p>
        </div>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if (successMessage != null)
        {
            <div class="alert alert-success">@successMessage</div>
        }

        <EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="ClientRegisterForm">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Username</label>
                <InputText @bind-Value="registerModel.Username" class="form-control" placeholder="Choose a username" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText type="password" @bind-Value="registerModel.Password" class="form-control" placeholder="Enter your password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="registerModel.Email" class="form-control" placeholder="Enter your email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group">
                <label>Full Name</label>
                <InputText @bind-Value="registerModel.FullName" class="form-control" placeholder="Enter your full name" />
                <ValidationMessage For="@(() => registerModel.FullName)" />
            </div>

            <div class="form-group">
                <label>Phone Number</label>
                <InputText @bind-Value="registerModel.PhoneNumber" class="form-control" placeholder="Enter your phone number" />
                <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
            </div>

            <button type="submit" class="btn btn-register" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm" role="status"></span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </EditForm>

        <div class="mt-3 text-center">
            <p>Already have an account? <a href="/">Login</a></p>
        </div>
    </div>
</div>

@code {
    private ClientRegistrationModel registerModel = new();
    private string errorMessage;
    private string successMessage;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var isUsernameTaken = await AuthService.IsUsernameTakenAsync(registerModel.Username);
            if (isUsernameTaken)
            {
                errorMessage = "Username is already taken";
                return;
            }

            var isRegistered = await AuthService.RegisterClientAsync(registerModel);
            if (isRegistered)
            {
                successMessage = "Registration successful! You can now login.";
                registerModel = new ClientRegistrationModel();
            }
            else
            {
                errorMessage = "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration failed");
            errorMessage = "An error occurred during registration";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #1a2a44 0%, #2e3b55 100%);
        padding: 20px;
    }

    .auth-card {
        background: #fff;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        padding: 40px;
        width: 100%;
        max-width: 450px;
        text-align: center;
        border-top: 5px solid #f4c430; 
    }

    .header-section {
        margin-bottom: 30px;
    }

        .header-section h2 {
            font-family: 'Playfair Display', serif;
            color: #1a2a44; 
            font-size: 2rem;
            margin-bottom: 5px;
        }

        .header-section p {
            color: #666;
            font-size: 1rem;
            font-style: italic;
        }

    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

        .form-group label {
            font-weight: 600;
            color: #1a2a44;
            margin-bottom: 8px;
            display: block;
        }

    .form-control {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 12px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
        width: 100%;
    }

        .form-control:focus {
            border-color: #f4c430;
            box-shadow: 0 0 5px rgba(244, 196, 48, 0.3);
            outline: none;
        }

    .btn-register {
        background: #f4c430; 
        color: #1a2a44;
        border: none;
        padding: 12px;
        width: 100%;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1.1rem;
        transition: background 0.3s ease;
    }

        .btn-register:hover {
            background: #e0b028;
        }

    .alert-danger {
        background: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .alert-success {
        background: #d4edda;
        color: #155724;
        padding: 10px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    a {
        color: #f4c430;
        text-decoration: none;
        font-weight: 500;
    }

        a:hover {
            text-decoration: underline;
        }
</style>