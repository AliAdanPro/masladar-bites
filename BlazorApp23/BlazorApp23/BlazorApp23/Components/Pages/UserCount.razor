@page "/user-count"
@using BlazorApp23.Components.Services
@using BlazorApp23.Components.Models
@inject UserCountService UserCountService
@rendermode InteractiveServer

<style>
    :root {
        --primary: #f5c542;
        --secondary: #1a2a44;
        --background: #f8f9fa;
        --card-bg: #ffffff;
        --shadow: rgba(0, 0, 0, 0.15);
    }

    .user-count-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 2rem;
        background: var(--card-bg);
        border-radius: 12px;
        box-shadow: 0 6px 12px var(--shadow);
        font-family: 'Inter', sans-serif;
        animation: fadeIn 0.5s ease-in-out;
    }

    .user-count-header {
        text-align: center;
        margin-bottom: 2rem;
        color: var(--secondary);
        font-family: 'Playfair Display', serif;
        font-size: 2rem;
        font-weight: 700;
        position: relative;
    }

        .user-count-header::after {
            content: '';
            position: absolute;
            bottom: -8px;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: var(--primary);
            border-radius: 2px;
        }

    .count-display {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--secondary);
        text-align: center;
        margin: 1.5rem 0;
        padding: 1.5rem;
        background: var(--background);
        border-radius: 8px;
        box-shadow: 0 2px 8px var(--shadow);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .count-display:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 12px var(--shadow);
        }

    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 2rem;
        background: var(--card-bg);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px var(--shadow);
    }

        .table th {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 12px 15px;
            text-align: left;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
        }

            .table th i {
                margin-right: 8px;
            }

        .table td {
            padding: 12px 15px;
            border-bottom: 1px solid #e0e0e0;
            transition: background-color 0.3s ease;
        }

        .table tr {
            animation: slideIn 0.5s ease-in-out;
        }

            .table tr:hover td {
                background-color: #f5f5f5;
            }

    .loading-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
    }

    .spinner-border {
        color: var(--primary);
        width: 3rem;
        height: 3rem;
        animation: spin 1s linear infinite, pulse 1.5s ease-in-out infinite;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1.5rem;
        font-family: 'Inter', sans-serif;
    }

    .alert-danger {
        color: #c92a2a;
        background-color: #ffd8d8;
        border-color: #f5c6cb;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateX(-10px);
        }

        to {
            opacity: 1;
            transform: translateX(0);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.2);
        }

        100% {
            transform: scale(1);
        }
    }
</style>

<div class="user-count-container">
    <h3 class="user-count-header">Customer Order History</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> @errorMessage
        </div>
    }
    else if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="count-display">
            <i class="bi bi-person-lines-fill me-2"></i> Unique Customers: @userCount
        </div>

        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th><i class="bi bi-hash"></i> Order #</th>
                        <th><i class="bi bi-calendar"></i> Date</th>
                        <th><i class="bi bi-telephone"></i> Contact</th>
                        <th><i class="bi bi-geo-alt"></i> Address</th>
                        <th><i class="bi bi-building"></i> City</th>
                        <th><i class="bi bi-currency-rupee"></i> Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr>
                            <td>@order.OrderNumber</td>
                            <td>@order.OrderDate.ToString("MMM dd, yyyy")</td>
                            <td>@order.ContactNumber</td>
                            <td>@order.DeliveryAddress</td>
                            <td>@order.City</td>
                            <td>@order.TotalPrice.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private int userCount;
    private List<OrderHistory> orders = new();
    private bool isLoading = true;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userCount = await UserCountService.GetUniqueUserCountAsync();
            orders = await UserCountService.GetAllOrdersAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}